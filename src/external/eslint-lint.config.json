[
   {
      "ok":false,
      "label":"for-direction",
      "comment":"enforce “for” loop update clause moving the counter in the right direction."
   },
   {
      "ok":false,
      "label":"getter-return",
      "comment":"enforce return statements in getters"
   },
   {
      "ok":false,
      "label":"no-await-in-loop",
      "comment":"disallow await inside of loops"
   },
   {
      "ok":true,
      "label":"no-compare-neg-zero",
      "comment":"disallow comparing against -0"
   },
   {
      "ok":true,
      "label":"no-cond-assign",
      "comment":"disallow assignment operators in conditional expressions"
   },
   {
      "ok":true,
      "label":"no-console",
      "comment":"disallow the use of console"
   },
   {
      "ok":true,
      "label":"no-constant-condition",
      "comment":"disallow constant expressions in conditions"
   },
   {
      "ok":true,
      "label":"no-control-regex",
      "comment":"disallow control characters in regular expressions"
   },
   {
      "ok":true,
      "label":"no-debugger",
      "comment":"disallow the use of debugger"
   },
   {
      "ok":true,
      "label":"no-dupe-args",
      "comment":"disallow duplicate arguments in function definitions"
   },
   {
      "ok":true,
      "label":"no-dupe-keys",
      "comment":"disallow duplicate keys in object literals"
   },
   {
      "ok":true,
      "label":"no-duplicate-case",
      "comment":"disallow duplicate case labels"
   },
   {
      "ok":true,
      "label":"no-empty",
      "comment":"disallow empty block statements"
   },
   {
      "ok":true,
      "label":"no-empty-character-class",
      "comment":"disallow empty character classes in regular expressions"
   },
   {
      "ok":true,
      "label":"no-ex-assign",
      "comment":"disallow reassigning exceptions in catch clauses"
   },
   {
      "ok":true,
      "label":"no-extra-boolean-cast",
      "comment":"disallow unnecessary boolean casts"
   },
   {
      "ok":false,
      "label":"no-extra-parens",
      "comment":"disallow unnecessary parentheses"
   },
   {
      "ok":true,
      "label":"no-extra-semi",
      "comment":"disallow unnecessary semicolons"
   },
   {
      "ok":true,
      "label":"no-func-assign",
      "comment":"disallow reassigning function declarations"
   },
   {
      "ok":true,
      "label":"no-inner-declarations",
      "comment":"disallow variable or function declarations in nested blocks"
   },
   {
      "ok":true,
      "label":"no-invalid-regexp",
      "comment":"disallow invalid regular expression strings in RegExp constructors"
   },
   {
      "ok":true,
      "label":"no-irregular-whitespace",
      "comment":"disallow irregular whitespace outside of strings and comments"
   },
   {
      "ok":true,
      "label":"no-obj-calls",
      "comment":"disallow calling global object properties as functions"
   },
   {
      "ok":false,
      "label":"no-prototype-builtins",
      "comment":"disallow calling some Object.prototype methods directly on objects"
   },
   {
      "ok":true,
      "label":"no-regex-spaces",
      "comment":"disallow multiple spaces in regular expressions"
   },
   {
      "ok":true,
      "label":"no-sparse-arrays",
      "comment":"disallow sparse arrays"
   },
   {
      "ok":false,
      "label":"no-template-curly-in-string",
      "comment":"disallow template literal placeholder syntax in regular strings"
   },
   {
      "ok":true,
      "label":"no-unexpected-multiline",
      "comment":"disallow confusing multiline expressions"
   },
   {
      "ok":true,
      "label":"no-unreachable",
      "comment":"disallow unreachable code after return, throw, continue, and break statements"
   },
   {
      "ok":true,
      "label":"no-unsafe-finally",
      "comment":"disallow control flow statements in finally blocks"
   },
   {
      "ok":true,
      "label":"no-unsafe-negation",
      "comment":"disallow negating the left operand of relational operators"
   },
   {
      "ok":true,
      "label":"use-isnan",
      "comment":"require calls to isNaN() when checking for NaN"
   },
   {
      "ok":false,
      "label":"valid-jsdoc",
      "comment":"enforce valid JSDoc comments"
   },
   {
      "ok":true,
      "label":"valid-typeof",
      "comment":"enforce comparing typeof expressions against valid strings"
   },
   {
      "ok":false,
      "label":"accessor-pairs",
      "comment":"enforce getter and setter pairs in objects"
   },
   {
      "ok":false,
      "label":"array-callback-return",
      "comment":"enforce return statements in callbacks of array methods"
   },
   {
      "ok":false,
      "label":"block-scoped-var",
      "comment":"enforce the use of variables within the scope they are defined"
   },
   {
      "ok":false,
      "label":"class-methods-use-this",
      "comment":"enforce that class methods utilize this"
   },
   {
      "ok":false,
      "label":"complexity",
      "comment":"enforce a maximum cyclomatic complexity allowed in a program"
   },
   {
      "ok":false,
      "label":"consistent-return",
      "comment":"require return statements to either always or never specify values"
   },
   {
      "ok":false,
      "label":"curly",
      "comment":"enforce consistent brace style for all control statements"
   },
   {
      "ok":false,
      "label":"default-case",
      "comment":"require default cases in switch statements"
   },
   {
      "ok":false,
      "label":"dot-location",
      "comment":"enforce consistent newlines before and after dots"
   },
   {
      "ok":false,
      "label":"dot-notation",
      "comment":"enforce dot notation whenever possible"
   },
   {
      "ok":false,
      "label":"eqeqeq",
      "comment":"require the use of === and !=="
   },
   {
      "ok":false,
      "label":"guard-for-in",
      "comment":"require for-in loops to include an if statement"
   },
   {
      "ok":false,
      "label":"no-alert",
      "comment":"disallow the use of alert, confirm, and prompt"
   },
   {
      "ok":false,
      "label":"no-caller",
      "comment":"disallow the use of arguments.caller or arguments.callee"
   },
   {
      "ok":true,
      "label":"no-case-declarations",
      "comment":"disallow lexical declarations in case clauses"
   },
   {
      "ok":false,
      "label":"no-div-regex",
      "comment":"disallow division operators explicitly at the beginning of regular expressions"
   },
   {
      "ok":false,
      "label":"no-else-return",
      "comment":"disallow else blocks after return statements in if statements"
   },
   {
      "ok":false,
      "label":"no-empty-function",
      "comment":"disallow empty functions"
   },
   {
      "ok":true,
      "label":"no-empty-pattern",
      "comment":"disallow empty destructuring patterns"
   },
   {
      "ok":false,
      "label":"no-eq-null",
      "comment":"disallow null comparisons without type-checking operators"
   },
   {
      "ok":false,
      "label":"no-eval",
      "comment":"disallow the use of eval()"
   },
   {
      "ok":false,
      "label":"no-extend-native",
      "comment":"disallow extending native types"
   },
   {
      "ok":false,
      "label":"no-extra-bind",
      "comment":"disallow unnecessary calls to .bind()"
   },
   {
      "ok":false,
      "label":"no-extra-label",
      "comment":"disallow unnecessary labels"
   },
   {
      "ok":true,
      "label":"no-fallthrough",
      "comment":"disallow fallthrough of case statements"
   },
   {
      "ok":false,
      "label":"no-floating-decimal",
      "comment":"disallow leading or trailing decimal points in numeric literals"
   },
   {
      "ok":true,
      "label":"no-global-assign",
      "comment":"disallow assignments to native objects or read-only global variables"
   },
   {
      "ok":false,
      "label":"no-implicit-coercion",
      "comment":"disallow shorthand type conversions"
   },
   {
      "ok":false,
      "label":"no-implicit-globals",
      "comment":"disallow variable and function declarations in the global scope"
   },
   {
      "ok":false,
      "label":"no-implied-eval",
      "comment":"disallow the use of eval()-like methods"
   },
   {
      "ok":false,
      "label":"no-invalid-this",
      "comment":"disallow this keywords outside of classes or class-like objects"
   },
   {
      "ok":false,
      "label":"no-iterator",
      "comment":"disallow the use of the __iterator__ property"
   },
   {
      "ok":false,
      "label":"no-labels",
      "comment":"disallow labeled statements"
   },
   {
      "ok":false,
      "label":"no-lone-blocks",
      "comment":"disallow unnecessary nested blocks"
   },
   {
      "ok":false,
      "label":"no-loop-func",
      "comment":"disallow function declarations and expressions inside loop statements"
   },
   {
      "ok":false,
      "label":"no-magic-numbers",
      "comment":"disallow magic numbers"
   },
   {
      "ok":false,
      "label":"no-multi-spaces",
      "comment":"disallow multiple spaces"
   },
   {
      "ok":false,
      "label":"no-multi-str",
      "comment":"disallow multiline strings"
   },
   {
      "ok":false,
      "label":"no-new",
      "comment":"disallow new operators outside of assignments or comparisons"
   },
   {
      "ok":false,
      "label":"no-new-func",
      "comment":"disallow new operators with the Function object"
   },
   {
      "ok":false,
      "label":"no-new-wrappers",
      "comment":"disallow new operators with the String, Number, and Boolean objects"
   },
   {
      "ok":true,
      "label":"no-octal",
      "comment":"disallow octal literals"
   },
   {
      "ok":false,
      "label":"no-octal-escape",
      "comment":"disallow octal escape sequences in string literals"
   },
   {
      "ok":false,
      "label":"no-param-reassign",
      "comment":"disallow reassigning function parameters"
   },
   {
      "ok":false,
      "label":"no-proto",
      "comment":"disallow the use of the __proto__ property"
   },
   {
      "ok":true,
      "label":"no-redeclare",
      "comment":"disallow variable redeclaration"
   },
   {
      "ok":false,
      "label":"no-restricted-properties",
      "comment":"disallow certain properties on certain objects"
   },
   {
      "ok":false,
      "label":"no-return-assign",
      "comment":"disallow assignment operators in return statements"
   },
   {
      "ok":false,
      "label":"no-return-await",
      "comment":"disallow unnecessary return await"
   },
   {
      "ok":false,
      "label":"no-script-url",
      "comment":"disallow javascript: urls"
   },
   {
      "ok":true,
      "label":"no-self-assign",
      "comment":"disallow assignments where both sides are exactly the same"
   },
   {
      "ok":false,
      "label":"no-self-compare",
      "comment":"disallow comparisons where both sides are exactly the same"
   },
   {
      "ok":false,
      "label":"no-sequences",
      "comment":"disallow comma operators"
   },
   {
      "ok":false,
      "label":"no-throw-literal",
      "comment":"disallow throwing literals as exceptions"
   },
   {
      "ok":false,
      "label":"no-unmodified-loop-condition",
      "comment":"disallow unmodified loop conditions"
   },
   {
      "ok":false,
      "label":"no-unused-expressions",
      "comment":"disallow unused expressions"
   },
   {
      "ok":true,
      "label":"no-unused-labels",
      "comment":"disallow unused labels"
   },
   {
      "ok":false,
      "label":"no-useless-call",
      "comment":"disallow unnecessary calls to .call() and .apply()"
   },
   {
      "ok":false,
      "label":"no-useless-concat",
      "comment":"disallow unnecessary concatenation of literals or template literals"
   },
   {
      "ok":true,
      "label":"no-useless-escape",
      "comment":"disallow unnecessary escape characters"
   },
   {
      "ok":false,
      "label":"no-useless-return",
      "comment":"disallow redundant return statements"
   },
   {
      "ok":false,
      "label":"no-void",
      "comment":"disallow void operators"
   },
   {
      "ok":false,
      "label":"no-warning-comments",
      "comment":"disallow specified warning terms in comments"
   },
   {
      "ok":false,
      "label":"no-with",
      "comment":"disallow with statements"
   },
   {
      "ok":false,
      "label":"prefer-promise-reject-errors",
      "comment":"require using Error objects as Promise rejection reasons"
   },
   {
      "ok":false,
      "label":"radix",
      "comment":"enforce the consistent use of the radix argument when using parseInt()"
   },
   {
      "ok":false,
      "label":"require-await",
      "comment":"disallow async functions which have no await expression"
   },
   {
      "ok":false,
      "label":"vars-on-top",
      "comment":"require var declarations be placed at the top of their containing scope"
   },
   {
      "ok":false,
      "label":"wrap-iife",
      "comment":"require parentheses around immediate function invocations"
   },
   {
      "ok":false,
      "label":"yoda",
      "comment":"require or disallow “Yoda” conditions"
   },
   {
      "ok":false,
      "label":"strict",
      "comment":"require or disallow strict mode directives"
   },
   {
      "ok":false,
      "label":"init-declarations",
      "comment":"require or disallow initialization in variable declarations"
   },
   {
      "ok":false,
      "label":"no-catch-shadow",
      "comment":"disallow catch clause parameters from shadowing variables in the outer scope"
   },
   {
      "ok":true,
      "label":"no-delete-var",
      "comment":"disallow deleting variables"
   },
   {
      "ok":false,
      "label":"no-label-var",
      "comment":"disallow labels that share a name with a variable"
   },
   {
      "ok":false,
      "label":"no-restricted-globals",
      "comment":"disallow specified global variables"
   },
   {
      "ok":false,
      "label":"no-shadow",
      "comment":"disallow variable declarations from shadowing variables declared in the outer scope"
   },
   {
      "ok":false,
      "label":"no-shadow-restricted-names",
      "comment":"disallow identifiers from shadowing restricted names"
   },
   {
      "ok":true,
      "label":"no-undef",
      "comment":"disallow the use of undeclared variables unless mentioned in /*global */ comments"
   },
   {
      "ok":false,
      "label":"no-undef-init",
      "comment":"disallow initializing variables to undefined"
   },
   {
      "ok":false,
      "label":"no-undefined",
      "comment":"disallow the use of undefined as an identifier"
   },
   {
      "ok":true,
      "label":"no-unused-vars",
      "comment":"disallow unused variables"
   },
   {
      "ok":false,
      "label":"no-use-before-define",
      "comment":"disallow the use of variables before they are defined"
   },
   {
      "ok":false,
      "label":"callback-return",
      "comment":"require return statements after callbacks"
   },
   {
      "ok":false,
      "label":"global-require",
      "comment":"require require() calls to be placed at top-level module scope"
   },
   {
      "ok":false,
      "label":"handle-callback-err",
      "comment":"require error handling in callbacks"
   },
   {
      "ok":false,
      "label":"no-buffer-constructor",
      "comment":"disallow use of the Buffer() constructor"
   },
   {
      "ok":false,
      "label":"no-mixed-requires",
      "comment":"disallow require calls to be mixed with regular variable declarations"
   },
   {
      "ok":false,
      "label":"no-new-require",
      "comment":"disallow new operators with calls to require"
   },
   {
      "ok":false,
      "label":"no-path-concat",
      "comment":"disallow string concatenation with __dirname and __filename"
   },
   {
      "ok":false,
      "label":"no-process-env",
      "comment":"disallow the use of process.env"
   },
   {
      "ok":false,
      "label":"no-process-exit",
      "comment":"disallow the use of process.exit()"
   },
   {
      "ok":false,
      "label":"no-restricted-modules",
      "comment":"disallow specified modules when loaded by require"
   },
   {
      "ok":false,
      "label":"no-sync",
      "comment":"disallow synchronous methods"
   },
   {
      "ok":false,
      "label":"array-bracket-newline",
      "comment":"enforce linebreaks after opening and before closing array brackets"
   },
   {
      "ok":false,
      "label":"array-bracket-spacing",
      "comment":"enforce consistent spacing inside array brackets"
   },
   {
      "ok":false,
      "label":"array-element-newline",
      "comment":"enforce line breaks after each array element"
   },
   {
      "ok":false,
      "label":"block-spacing",
      "comment":"disallow or enforce spaces inside of blocks after opening block and before closing block"
   },
   {
      "ok":false,
      "label":"brace-style",
      "comment":"enforce consistent brace style for blocks"
   },
   {
      "ok":false,
      "label":"camelcase",
      "comment":"enforce camelcase naming convention"
   },
   {
      "ok":false,
      "label":"capitalized-comments",
      "comment":"enforce or disallow capitalization of the first letter of a comment"
   },
   {
      "ok":false,
      "label":"comma-dangle",
      "comment":"require or disallow trailing commas"
   },
   {
      "ok":false,
      "label":"comma-spacing",
      "comment":"enforce consistent spacing before and after commas"
   },
   {
      "ok":false,
      "label":"comma-style",
      "comment":"enforce consistent comma style"
   },
   {
      "ok":false,
      "label":"computed-property-spacing",
      "comment":"enforce consistent spacing inside computed property brackets"
   },
   {
      "ok":false,
      "label":"consistent-this",
      "comment":"enforce consistent naming when capturing the current execution context"
   },
   {
      "ok":false,
      "label":"eol-last",
      "comment":"require or disallow newline at the end of files"
   },
   {
      "ok":false,
      "label":"func-call-spacing",
      "comment":"require or disallow spacing between function identifiers and their invocations"
   },
   {
      "ok":false,
      "label":"func-name-matching",
      "comment":"require function names to match the name of the variable or property to which they are assigned"
   },
   {
      "ok":false,
      "label":"func-names",
      "comment":"require or disallow named function expressions"
   },
   {
      "ok":false,
      "label":"func-style",
      "comment":"enforce the consistent use of either function declarations or expressions"
   },
   {
      "ok":false,
      "label":"function-paren-newline",
      "comment":"enforce consistent line breaks inside function parentheses"
   },
   {
      "ok":false,
      "label":"id-blacklist",
      "comment":"disallow specified identifiers"
   },
   {
      "ok":false,
      "label":"id-length",
      "comment":"enforce minimum and maximum identifier lengths"
   },
   {
      "ok":false,
      "label":"id-match",
      "comment":"require identifiers to match a specified regular expression"
   },
   {
      "ok":false,
      "label":"implicit-arrow-linebreak",
      "comment":"enforce the location of arrow function bodies"
   },
   {
      "ok":false,
      "label":"indent",
      "comment":"enforce consistent indentation"
   },
   {
      "ok":false,
      "label":"jsx-quotes",
      "comment":"enforce the consistent use of either double or single quotes in JSX attributes"
   },
   {
      "ok":false,
      "label":"key-spacing",
      "comment":"enforce consistent spacing between keys and values in object literal properties"
   },
   {
      "ok":false,
      "label":"keyword-spacing",
      "comment":"enforce consistent spacing before and after keywords"
   },
   {
      "ok":false,
      "label":"line-comment-position",
      "comment":"enforce position of line comments"
   },
   {
      "ok":false,
      "label":"linebreak-style",
      "comment":"enforce consistent linebreak style"
   },
   {
      "ok":false,
      "label":"lines-around-comment",
      "comment":"require empty lines around comments"
   },
   {
      "ok":false,
      "label":"lines-between-class-members",
      "comment":"require or disallow an empty line between class members"
   },
   {
      "ok":false,
      "label":"max-depth",
      "comment":"enforce a maximum depth that blocks can be nested"
   },
   {
      "ok":false,
      "label":"max-len",
      "comment":"enforce a maximum line length"
   },
   {
      "ok":false,
      "label":"max-lines",
      "comment":"enforce a maximum number of lines per file"
   },
   {
      "ok":false,
      "label":"max-nested-callbacks",
      "comment":"enforce a maximum depth that callbacks can be nested"
   },
   {
      "ok":false,
      "label":"max-params",
      "comment":"enforce a maximum number of parameters in function definitions"
   },
   {
      "ok":false,
      "label":"max-statements",
      "comment":"enforce a maximum number of statements allowed in function blocks"
   },
   {
      "ok":false,
      "label":"max-statements-per-line",
      "comment":"enforce a maximum number of statements allowed per line"
   },
   {
      "ok":false,
      "label":"multiline-comment-style",
      "comment":"enforce a particular style for multiline comments"
   },
   {
      "ok":false,
      "label":"multiline-ternary",
      "comment":"enforce newlines between operands of ternary expressions"
   },
   {
      "ok":false,
      "label":"new-cap",
      "comment":"require constructor names to begin with a capital letter"
   },
   {
      "ok":false,
      "label":"new-parens",
      "comment":"require parentheses when invoking a constructor with no arguments"
   },
   {
      "ok":false,
      "label":"newline-per-chained-call",
      "comment":"require a newline after each call in a method chain"
   },
   {
      "ok":false,
      "label":"no-array-constructor",
      "comment":"disallow Array constructors"
   },
   {
      "ok":false,
      "label":"no-bitwise",
      "comment":"disallow bitwise operators"
   },
   {
      "ok":false,
      "label":"no-continue",
      "comment":"disallow continue statements"
   },
   {
      "ok":false,
      "label":"no-inline-comments",
      "comment":"disallow inline comments after code"
   },
   {
      "ok":false,
      "label":"no-lonely-if",
      "comment":"disallow if statements as the only statement in else blocks"
   },
   {
      "ok":false,
      "label":"no-mixed-operators",
      "comment":"disallow mixed binary operators"
   },
   {
      "ok":true,
      "label":"no-mixed-spaces-and-tabs",
      "comment":"disallow mixed spaces and tabs for indentation"
   },
   {
      "ok":false,
      "label":"no-multi-assign",
      "comment":"disallow use of chained assignment expressions"
   },
   {
      "ok":false,
      "label":"no-multiple-empty-lines",
      "comment":"disallow multiple empty lines"
   },
   {
      "ok":false,
      "label":"no-negated-condition",
      "comment":"disallow negated conditions"
   },
   {
      "ok":false,
      "label":"no-nested-ternary",
      "comment":"disallow nested ternary expressions"
   },
   {
      "ok":false,
      "label":"no-new-object",
      "comment":"disallow Object constructors"
   },
   {
      "ok":false,
      "label":"no-plusplus",
      "comment":"disallow the unary operators ++ and --"
   },
   {
      "ok":false,
      "label":"no-restricted-syntax",
      "comment":"disallow specified syntax"
   },
   {
      "ok":false,
      "label":"no-tabs",
      "comment":"disallow all tabs"
   },
   {
      "ok":false,
      "label":"no-ternary",
      "comment":"disallow ternary operators"
   },
   {
      "ok":false,
      "label":"no-trailing-spaces",
      "comment":"disallow trailing whitespace at the end of lines"
   },
   {
      "ok":false,
      "label":"no-underscore-dangle",
      "comment":"disallow dangling underscores in identifiers"
   },
   {
      "ok":false,
      "label":"no-unneeded-ternary",
      "comment":"disallow ternary operators when simpler alternatives exist"
   },
   {
      "ok":false,
      "label":"no-whitespace-before-property",
      "comment":"disallow whitespace before properties"
   },
   {
      "ok":false,
      "label":"nonblock-statement-body-position",
      "comment":"enforce the location of single-line statements"
   },
   {
      "ok":false,
      "label":"object-curly-newline",
      "comment":"enforce consistent line breaks inside braces"
   },
   {
      "ok":false,
      "label":"object-curly-spacing",
      "comment":"enforce consistent spacing inside braces"
   },
   {
      "ok":false,
      "label":"object-property-newline",
      "comment":"enforce placing object properties on separate lines"
   },
   {
      "ok":false,
      "label":"one-var",
      "comment":"enforce variables to be declared either together or separately in functions"
   },
   {
      "ok":false,
      "label":"one-var-declaration-per-line",
      "comment":"require or disallow newlines around variable declarations"
   },
   {
      "ok":false,
      "label":"operator-assignment",
      "comment":"require or disallow assignment operator shorthand where possible"
   },
   {
      "ok":false,
      "label":"operator-linebreak",
      "comment":"enforce consistent linebreak style for operators"
   },
   {
      "ok":false,
      "label":"padded-blocks",
      "comment":"require or disallow padding within blocks"
   },
   {
      "ok":false,
      "label":"padding-line-between-statements",
      "comment":"require or disallow padding lines between statements"
   },
   {
      "ok":false,
      "label":"quote-props",
      "comment":"require quotes around object literal property names"
   },
   {
      "ok":false,
      "label":"quotes",
      "comment":"enforce the consistent use of either backticks, double, or single quotes"
   },
   {
      "ok":false,
      "label":"require-jsdoc",
      "comment":"require JSDoc comments"
   },
   {
      "ok":false,
      "label":"semi",
      "comment":"require or disallow semicolons instead of ASI"
   },
   {
      "ok":false,
      "label":"semi-spacing",
      "comment":"enforce consistent spacing before and after semicolons"
   },
   {
      "ok":false,
      "label":"semi-style",
      "comment":"enforce location of semicolons"
   },
   {
      "ok":false,
      "label":"sort-keys",
      "comment":"require object keys to be sorted"
   },
   {
      "ok":false,
      "label":"sort-vars",
      "comment":"require variables within the same declaration block to be sorted"
   },
   {
      "ok":false,
      "label":"space-before-blocks",
      "comment":"enforce consistent spacing before blocks"
   },
   {
      "ok":false,
      "label":"space-before-function-paren",
      "comment":"enforce consistent spacing before function definition opening parenthesis"
   },
   {
      "ok":false,
      "label":"space-in-parens",
      "comment":"enforce consistent spacing inside parentheses"
   },
   {
      "ok":false,
      "label":"space-infix-ops",
      "comment":"require spacing around infix operators"
   },
   {
      "ok":false,
      "label":"space-unary-ops",
      "comment":"enforce consistent spacing before or after unary operators"
   },
   {
      "ok":false,
      "label":"spaced-comment",
      "comment":"enforce consistent spacing after the // or /* in a comment"
   },
   {
      "ok":false,
      "label":"switch-colon-spacing",
      "comment":"enforce spacing around colons of switch statements"
   },
   {
      "ok":false,
      "label":"template-tag-spacing",
      "comment":"require or disallow spacing between template tags and their literals"
   },
   {
      "ok":false,
      "label":"unicode-bom",
      "comment":"require or disallow Unicode byte order mark (BOM)"
   },
   {
      "ok":false,
      "label":"wrap-regex",
      "comment":"require parenthesis around regex literals"
   },
   {
      "ok":false,
      "label":"arrow-body-style",
      "comment":"require braces around arrow function bodies"
   },
   {
      "ok":false,
      "label":"arrow-parens",
      "comment":"require parentheses around arrow function arguments"
   },
   {
      "ok":false,
      "label":"arrow-spacing",
      "comment":"enforce consistent spacing before and after the arrow in arrow functions"
   },
   {
      "ok":true,
      "label":"constructor-super",
      "comment":"require super() calls in constructors"
   },
   {
      "ok":false,
      "label":"generator-star-spacing",
      "comment":"enforce consistent spacing around * operators in generator functions"
   },
   {
      "ok":true,
      "label":"no-class-assign",
      "comment":"disallow reassigning class members"
   },
   {
      "ok":false,
      "label":"no-confusing-arrow",
      "comment":"disallow arrow functions where they could be confused with comparisons"
   },
   {
      "ok":true,
      "label":"no-const-assign",
      "comment":"disallow reassigning const variables"
   },
   {
      "ok":true,
      "label":"no-dupe-class-members",
      "comment":"disallow duplicate class members"
   },
   {
      "ok":false,
      "label":"no-duplicate-imports",
      "comment":"disallow duplicate module imports"
   },
   {
      "ok":true,
      "label":"no-new-symbol",
      "comment":"disallow new operators with the Symbol object"
   },
   {
      "ok":false,
      "label":"no-restricted-imports",
      "comment":"disallow specified modules when loaded by import"
   },
   {
      "ok":true,
      "label":"no-this-before-super",
      "comment":"disallow this/super before calling super() in constructors"
   },
   {
      "ok":false,
      "label":"no-useless-computed-key",
      "comment":"disallow unnecessary computed property keys in object literals"
   },
   {
      "ok":false,
      "label":"no-useless-constructor",
      "comment":"disallow unnecessary constructors"
   },
   {
      "ok":false,
      "label":"no-useless-rename",
      "comment":"disallow renaming import, export, and destructured assignments to the same name"
   },
   {
      "ok":false,
      "label":"no-var",
      "comment":"require let or const instead of var"
   },
   {
      "ok":false,
      "label":"object-shorthand",
      "comment":"require or disallow method and property shorthand syntax for object literals"
   },
   {
      "ok":false,
      "label":"prefer-arrow-callback",
      "comment":"require using arrow functions for callbacks"
   },
   {
      "ok":false,
      "label":"prefer-const",
      "comment":"require const declarations for variables that are never reassigned after declared"
   },
   {
      "ok":false,
      "label":"prefer-destructuring",
      "comment":"require destructuring from arrays and/or objects"
   },
   {
      "ok":false,
      "label":"prefer-numeric-literals",
      "comment":"disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals"
   },
   {
      "ok":false,
      "label":"prefer-rest-params",
      "comment":"require rest parameters instead of arguments"
   },
   {
      "ok":false,
      "label":"prefer-spread",
      "comment":"require spread operators instead of .apply()"
   },
   {
      "ok":false,
      "label":"prefer-template",
      "comment":"require template literals instead of string concatenation"
   },
   {
      "ok":true,
      "label":"require-yield",
      "comment":"require generator functions to contain yield"
   },
   {
      "ok":false,
      "label":"rest-spread-spacing",
      "comment":"enforce spacing between rest and spread operators and their expressions"
   },
   {
      "ok":false,
      "label":"sort-imports",
      "comment":"enforce sorted import declarations within modules"
   },
   {
      "ok":false,
      "label":"symbol-description",
      "comment":"require symbol descriptions"
   },
   {
      "ok":false,
      "label":"template-curly-spacing",
      "comment":"require or disallow spacing around embedded expressions of template strings"
   },
   {
      "ok":false,
      "label":"yield-star-spacing",
      "comment":"require or disallow spacing around the * in yield* expressions"
   }
]